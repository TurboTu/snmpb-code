.TH "QwtPanner" 3 "17 Sep 2006" "Version 5.0.0-rc0" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtPanner \- 
.SH SYNOPSIS
.br
.PP
Inherited by \fBQwtPlotPanner\fP.
.PP
.SH "Detailed Description"
.PP 
QwtPanner provides panning of a widget. 

QwtPanner grabs the contents of a widget, that can be dragged in all directions. The offset between the start and the end position is emitted by the panned signal.
.PP
QwtPanner grabs the content of the widget into a pixmap and moves the pixmap around, without initiating any repaint events for the widget. Areas, that are not part of content are not painted while panning in in process. This makes panning fast enough for widgets, where repaints are too slow for mouse movements.
.PP
For widgets, where repaints are very fast it might be better to implement panning manually by mapping mouse events into paint events.
.PP
Definition at line 35 of file qwt_panner.h.
.SS "Signals"

.in +1c
.ti -1c
.RI "void \fBpanned\fP (int dx, int dy)"
.br
.ti -1c
.RI "void \fBmoved\fP (int dx, int dy)"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtPanner\fP (QWidget *parent)"
.br
.ti -1c
.RI "virtual \fB~QwtPanner\fP ()"
.br
.ti -1c
.RI "void \fBsetEnabled\fP (bool)"
.br
.ti -1c
.RI "bool \fBisEnabled\fP () const "
.br
.ti -1c
.RI "void \fBsetMouseButton\fP (int button, int buttonState=Qt::NoButton)"
.br
.ti -1c
.RI "void \fBgetMouseButton\fP (int &button, int &buttonState) const "
.br
.ti -1c
.RI "void \fBsetAbortKey\fP (int key, int state=Qt::NoButton)"
.br
.ti -1c
.RI "void \fBgetAbortKey\fP (int &key, int &state) const "
.br
.ti -1c
.RI "void \fBsetCursor\fP (const QCursor &)"
.br
.ti -1c
.RI "const QCursor \fBcursor\fP () const "
.br
.ti -1c
.RI "virtual bool \fBeventFilter\fP (QObject *, QEvent *)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBwidgetMousePressEvent\fP (QMouseEvent *)"
.br
.ti -1c
.RI "virtual void \fBwidgetMouseReleaseEvent\fP (QMouseEvent *)"
.br
.ti -1c
.RI "virtual void \fBwidgetMouseMoveEvent\fP (QMouseEvent *)"
.br
.ti -1c
.RI "virtual void \fBwidgetKeyPressEvent\fP (QKeyEvent *)"
.br
.ti -1c
.RI "virtual void \fBwidgetKeyReleaseEvent\fP (QKeyEvent *)"
.br
.ti -1c
.RI "virtual void \fBpaintEvent\fP (QPaintEvent *)"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QwtPanner::QwtPanner (QWidget * parent)"
.PP
Creates an panner that is enabled for the left mouse button.
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP Parent widget to be panned
.RE
.PP

.PP
Definition at line 49 of file qwt_panner.cpp.
.PP
References setEnabled().
.SS "QwtPanner::~QwtPanner ()\fC [virtual]\fP"
.PP
Destructor. 
.PP
Definition at line 72 of file qwt_panner.cpp.
.SH "Member Function Documentation"
.PP 
.SS "const QCursor QwtPanner::cursor () const"
.PP
\fBReturns:\fP
.RS 4
Cursor that is active while panning 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetCursor()\fP
.RE
.PP

.PP
Definition at line 128 of file qwt_panner.cpp.
.SS "bool QwtPanner::eventFilter (QObject * o, QEvent * e)\fC [virtual]\fP"
.PP
Event filter. 
.PP
When \fBisEnabled()\fP the mouse events of the observed widget are filtered.
.PP
\fBSee also:\fP
.RS 4
\fBwidgetMousePressEvent()\fP, \fBwidgetMouseReleaseEvent()\fP, \fBwidgetMouseMoveEvent()\fP
.RE
.PP

.PP
Definition at line 222 of file qwt_panner.cpp.
.PP
References widgetKeyPressEvent(), widgetKeyReleaseEvent(), widgetMouseMoveEvent(), widgetMousePressEvent(), and widgetMouseReleaseEvent().
.SS "void QwtPanner::getAbortKey (int & key, int & state) const"
.PP
Get the abort key. 
.PP
Definition at line 105 of file qwt_panner.cpp.
.SS "void QwtPanner::getMouseButton (int & button, int & buttonState) const"
.PP
Get the mouse button. 
.PP
Definition at line 88 of file qwt_panner.cpp.
.SS "bool QwtPanner::isEnabled () const"
.PP
\fBReturns:\fP
.RS 4
true when enabled, false otherwise 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetEnabled\fP, \fBeventFilter()\fP
.RE
.PP

.PP
Definition at line 168 of file qwt_panner.cpp.
.SS "void QwtPanner::moved (int dx, int dy)\fC [signal]\fP"
.PP
Signal emitted, while the widget moved, but panning is not finished.
.PP
\fBParameters:\fP
.RS 4
\fIdx\fP Offset in horizontal direction 
.br
\fIdx\fP Offset in vertical direction
.RE
.PP

.PP
Referenced by widgetMouseMoveEvent().
.SS "void QwtPanner::paintEvent (QPaintEvent * pe)\fC [protected, virtual]\fP"
.PP
Paint event. 
.PP
Repaint the grabbed pixmap on its current position and fill the empty spaces by the background of the parent widget.
.PP
\fBParameters:\fP
.RS 4
\fIpe\fP Paint event
.RE
.PP

.PP
Definition at line 181 of file qwt_panner.cpp.
.SS "void QwtPanner::panned (int dx, int dy)\fC [signal]\fP"
.PP
Signal emitted, when panning is done
.PP
\fBParameters:\fP
.RS 4
\fIdx\fP Offset in horizontal direction 
.br
\fIdx\fP Offset in vertical direction
.RE
.PP

.PP
Referenced by QwtPlotPanner::QwtPlotPanner(), and widgetMouseReleaseEvent().
.SS "void QwtPanner::setAbortKey (int key, int state = \fCQt::NoButton\fP)"
.PP
Change the abort key The defaults are Qt::Key_Escape and Qt::NoButton
.PP
Definition at line 98 of file qwt_panner.cpp.
.SS "void QwtPanner::setCursor (const QCursor & cursor)"
.PP
Change the cursor, that is active while panning The default is the cursor of the parent widget.
.PP
\fBParameters:\fP
.RS 4
\fIcursor\fP New cursor
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetCursor()\fP
.RE
.PP

.PP
Definition at line 119 of file qwt_panner.cpp.
.SS "void QwtPanner::setEnabled (bool on)"
.PP
En/disable the panner. 
.PP
When enabled is true an event filter is installed for the observed widget, otherwise the event filter is removed.
.PP
\fBParameters:\fP
.RS 4
\fIenabled\fP true or false 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBisEnabled()\fP, \fBeventFilter()\fP
.RE
.PP

.PP
Definition at line 142 of file qwt_panner.cpp.
.PP
Referenced by QwtPanner().
.SS "void QwtPanner::setMouseButton (int button, int buttonState = \fCQt::NoButton\fP)"
.PP
Change the mouse button The defaults are Qt::LeftButton and Qt::NoButton
.PP
Definition at line 81 of file qwt_panner.cpp.
.SS "void QwtPanner::widgetMouseMoveEvent (QMouseEvent * me)\fC [protected, virtual]\fP"
.PP
Handle a mouse release event for the observed widget.
.PP
\fBSee also:\fP
.RS 4
\fBeventFilter()\fP, \fBwidgetMousePressEvent()\fP, \fBwidgetMouseMoveEvent()\fP,
.RE
.PP

.PP
Definition at line 304 of file qwt_panner.cpp.
.PP
References moved().
.PP
Referenced by eventFilter().
.SS "void QwtPanner::widgetMousePressEvent (QMouseEvent * me)\fC [protected, virtual]\fP"
.PP
Handle a mouse press event for the observed widget.
.PP
\fBSee also:\fP
.RS 4
\fBeventFilter()\fP, \fBwidgetMouseReleaseEvent()\fP, \fBwidgetMouseMoveEvent()\fP,
.RE
.PP

.PP
Definition at line 266 of file qwt_panner.cpp.
.PP
Referenced by eventFilter().
.SS "void QwtPanner::widgetMouseReleaseEvent (QMouseEvent * me)\fC [protected, virtual]\fP"
.PP
Handle a mouse move event for the observed widget.
.PP
\fBSee also:\fP
.RS 4
\fBeventFilter()\fP, \fBwidgetMousePressEvent()\fP, \fBwidgetMouseReleaseEvent()\fP,
.RE
.PP

.PP
Definition at line 321 of file qwt_panner.cpp.
.PP
References panned().
.PP
Referenced by eventFilter().

.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code.
